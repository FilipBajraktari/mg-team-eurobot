# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fastestrplidar
else:
    import _fastestrplidar

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastestrplidar.delete_SwigPyIterator

    def value(self):
        return _fastestrplidar.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fastestrplidar.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fastestrplidar.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fastestrplidar.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fastestrplidar.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fastestrplidar.SwigPyIterator_copy(self)

    def next(self):
        return _fastestrplidar.SwigPyIterator_next(self)

    def __next__(self):
        return _fastestrplidar.SwigPyIterator___next__(self)

    def previous(self):
        return _fastestrplidar.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fastestrplidar.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fastestrplidar.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fastestrplidar.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fastestrplidar.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fastestrplidar.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fastestrplidar.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fastestrplidar.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _fastestrplidar:
_fastestrplidar.SwigPyIterator_swigregister(SwigPyIterator)

class RplidarScanMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_fastestrplidar.RplidarScanMode_id_get, _fastestrplidar.RplidarScanMode_id_set)
    us_per_sample = property(_fastestrplidar.RplidarScanMode_us_per_sample_get, _fastestrplidar.RplidarScanMode_us_per_sample_set)
    max_distance = property(_fastestrplidar.RplidarScanMode_max_distance_get, _fastestrplidar.RplidarScanMode_max_distance_set)
    ans_type = property(_fastestrplidar.RplidarScanMode_ans_type_get, _fastestrplidar.RplidarScanMode_ans_type_set)
    scan_mode = property(_fastestrplidar.RplidarScanMode_scan_mode_get, _fastestrplidar.RplidarScanMode_scan_mode_set)

    def __init__(self):
        _fastestrplidar.RplidarScanMode_swiginit(self, _fastestrplidar.new_RplidarScanMode())
    __swig_destroy__ = _fastestrplidar.delete_RplidarScanMode

# Register RplidarScanMode in _fastestrplidar:
_fastestrplidar.RplidarScanMode_swigregister(RplidarScanMode)

DRIVER_TYPE_SERIALPORT = _fastestrplidar.DRIVER_TYPE_SERIALPORT
DRIVER_TYPE_TCP = _fastestrplidar.DRIVER_TYPE_TCP
class ChannelDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def bind(self, arg2, arg3):
        return _fastestrplidar.ChannelDevice_bind(self, arg2, arg3)

    def open(self):
        return _fastestrplidar.ChannelDevice_open(self)

    def close(self):
        return _fastestrplidar.ChannelDevice_close(self)

    def flush(self):
        return _fastestrplidar.ChannelDevice_flush(self)

    def waitfordata(self, data_count, timeout=-1, returned_size=None):
        return _fastestrplidar.ChannelDevice_waitfordata(self, data_count, timeout, returned_size)

    def senddata(self, data, size):
        return _fastestrplidar.ChannelDevice_senddata(self, data, size)

    def recvdata(self, data, size):
        return _fastestrplidar.ChannelDevice_recvdata(self, data, size)

    def setDTR(self):
        return _fastestrplidar.ChannelDevice_setDTR(self)

    def clearDTR(self):
        return _fastestrplidar.ChannelDevice_clearDTR(self)

    def ReleaseRxTx(self):
        return _fastestrplidar.ChannelDevice_ReleaseRxTx(self)
    __swig_destroy__ = _fastestrplidar.delete_ChannelDevice

# Register ChannelDevice in _fastestrplidar:
_fastestrplidar.ChannelDevice_swigregister(ChannelDevice)

class RPlidarDriver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_TIMEOUT = _fastestrplidar.RPlidarDriver_DEFAULT_TIMEOUT
    MAX_SCAN_NODES = _fastestrplidar.RPlidarDriver_MAX_SCAN_NODES
    LEGACY_SAMPLE_DURATION = _fastestrplidar.RPlidarDriver_LEGACY_SAMPLE_DURATION

    @staticmethod
    def CreateDriver(*args):
        return _fastestrplidar.RPlidarDriver_CreateDriver(*args)

    @staticmethod
    def DisposeDriver(drv):
        return _fastestrplidar.RPlidarDriver_DisposeDriver(drv)

    def connect(self, arg2, arg3, flag=0):
        return _fastestrplidar.RPlidarDriver_connect(self, arg2, arg3, flag)

    def disconnect(self):
        return _fastestrplidar.RPlidarDriver_disconnect(self)

    def isConnected(self):
        return _fastestrplidar.RPlidarDriver_isConnected(self)

    def reset(self, *args):
        return _fastestrplidar.RPlidarDriver_reset(self, *args)

    def clearNetSerialRxCache(self):
        return _fastestrplidar.RPlidarDriver_clearNetSerialRxCache(self)

    def getAllSupportedScanModes(self, *args):
        return _fastestrplidar.RPlidarDriver_getAllSupportedScanModes(self, *args)

    def getTypicalScanMode(self, *args):
        return _fastestrplidar.RPlidarDriver_getTypicalScanMode(self, *args)

    def startScan(self, force, useTypicalScan, options=0, outUsedScanMode=None):
        return _fastestrplidar.RPlidarDriver_startScan(self, force, useTypicalScan, options, outUsedScanMode)

    def startScanExpress(self, *args):
        return _fastestrplidar.RPlidarDriver_startScanExpress(self, *args)

    def getHealth(self, *args):
        return _fastestrplidar.RPlidarDriver_getHealth(self, *args)

    def getDeviceInfo(self, *args):
        return _fastestrplidar.RPlidarDriver_getDeviceInfo(self, *args)

    def getSampleDuration_uS(self, *args):
        return _fastestrplidar.RPlidarDriver_getSampleDuration_uS(self, *args)

    def setMotorPWM(self, pwm):
        return _fastestrplidar.RPlidarDriver_setMotorPWM(self, pwm)

    def setLidarSpinSpeed(self, *args):
        return _fastestrplidar.RPlidarDriver_setLidarSpinSpeed(self, *args)

    def startMotor(self):
        return _fastestrplidar.RPlidarDriver_startMotor(self)

    def stopMotor(self):
        return _fastestrplidar.RPlidarDriver_stopMotor(self)

    def checkMotorCtrlSupport(self, *args):
        return _fastestrplidar.RPlidarDriver_checkMotorCtrlSupport(self, *args)

    def checkIfTofLidar(self, *args):
        return _fastestrplidar.RPlidarDriver_checkIfTofLidar(self, *args)

    def getFrequency(self, *args):
        return _fastestrplidar.RPlidarDriver_getFrequency(self, *args)

    def startScanNormal(self, *args):
        return _fastestrplidar.RPlidarDriver_startScanNormal(self, *args)

    def checkExpressScanSupported(self, *args):
        return _fastestrplidar.RPlidarDriver_checkExpressScanSupported(self, *args)

    def stop(self, *args):
        return _fastestrplidar.RPlidarDriver_stop(self, *args)

    def grabScanData(self, *args):
        return _fastestrplidar.RPlidarDriver_grabScanData(self, *args)

    def grabScanDataHq(self, *args):
        return _fastestrplidar.RPlidarDriver_grabScanDataHq(self, *args)

    def ascendScanData(self, *args):
        return _fastestrplidar.RPlidarDriver_ascendScanData(self, *args)

    def getScanDataWithInterval(self, nodebuffer, count):
        return _fastestrplidar.RPlidarDriver_getScanDataWithInterval(self, nodebuffer, count)

    def getScanDataWithIntervalHq(self, nodebuffer, count):
        return _fastestrplidar.RPlidarDriver_getScanDataWithIntervalHq(self, nodebuffer, count)
    __swig_destroy__ = _fastestrplidar.delete_RPlidarDriver
    _chanDev = property(_fastestrplidar.RPlidarDriver__chanDev_get, _fastestrplidar.RPlidarDriver__chanDev_set)

# Register RPlidarDriver in _fastestrplidar:
_fastestrplidar.RPlidarDriver_swigregister(RPlidarDriver)

def RPlidarDriver_CreateDriver(*args):
    return _fastestrplidar.RPlidarDriver_CreateDriver(*args)

def RPlidarDriver_DisposeDriver(drv):
    return _fastestrplidar.RPlidarDriver_DisposeDriver(drv)

class lidar_sample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    angle = property(_fastestrplidar.lidar_sample_angle_get, _fastestrplidar.lidar_sample_angle_set)
    distance = property(_fastestrplidar.lidar_sample_distance_get, _fastestrplidar.lidar_sample_distance_set)
    quality = property(_fastestrplidar.lidar_sample_quality_get, _fastestrplidar.lidar_sample_quality_set)

    def __init__(self):
        _fastestrplidar.lidar_sample_swiginit(self, _fastestrplidar.new_lidar_sample())
    __swig_destroy__ = _fastestrplidar.delete_lidar_sample

# Register lidar_sample in _fastestrplidar:
_fastestrplidar.lidar_sample_swigregister(lidar_sample)

class FastestRplidar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastestrplidar.FastestRplidar_swiginit(self, _fastestrplidar.new_FastestRplidar(*args))
    __swig_destroy__ = _fastestrplidar.delete_FastestRplidar

    def connectlidar(self):
        return _fastestrplidar.FastestRplidar_connectlidar(self)

    def destroydriver(self):
        return _fastestrplidar.FastestRplidar_destroydriver(self)

    def checkhealth(self):
        return _fastestrplidar.FastestRplidar_checkhealth(self)

    def stopmotor(self):
        return _fastestrplidar.FastestRplidar_stopmotor(self)

    def startmotor(self, my_scanmode=2):
        return _fastestrplidar.FastestRplidar_startmotor(self, my_scanmode)

    def get_scan_as_lidar_samples(self, filter_quality=False):
        return _fastestrplidar.FastestRplidar_get_scan_as_lidar_samples(self, filter_quality)

    def get_scan_as_vectors(self, filter_quality=False):
        return _fastestrplidar.FastestRplidar_get_scan_as_vectors(self, filter_quality)

    def get_scan_as_xy(self, filter_quality=False):
        return _fastestrplidar.FastestRplidar_get_scan_as_xy(self, filter_quality)

# Register FastestRplidar in _fastestrplidar:
_fastestrplidar.FastestRplidar_swigregister(FastestRplidar)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastestrplidar.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastestrplidar.vector_double___nonzero__(self)

    def __bool__(self):
        return _fastestrplidar.vector_double___bool__(self)

    def __len__(self):
        return _fastestrplidar.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _fastestrplidar.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastestrplidar.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastestrplidar.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastestrplidar.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastestrplidar.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastestrplidar.vector_double___setitem__(self, *args)

    def pop(self):
        return _fastestrplidar.vector_double_pop(self)

    def append(self, x):
        return _fastestrplidar.vector_double_append(self, x)

    def empty(self):
        return _fastestrplidar.vector_double_empty(self)

    def size(self):
        return _fastestrplidar.vector_double_size(self)

    def swap(self, v):
        return _fastestrplidar.vector_double_swap(self, v)

    def begin(self):
        return _fastestrplidar.vector_double_begin(self)

    def end(self):
        return _fastestrplidar.vector_double_end(self)

    def rbegin(self):
        return _fastestrplidar.vector_double_rbegin(self)

    def rend(self):
        return _fastestrplidar.vector_double_rend(self)

    def clear(self):
        return _fastestrplidar.vector_double_clear(self)

    def get_allocator(self):
        return _fastestrplidar.vector_double_get_allocator(self)

    def pop_back(self):
        return _fastestrplidar.vector_double_pop_back(self)

    def erase(self, *args):
        return _fastestrplidar.vector_double_erase(self, *args)

    def __init__(self, *args):
        _fastestrplidar.vector_double_swiginit(self, _fastestrplidar.new_vector_double(*args))

    def push_back(self, x):
        return _fastestrplidar.vector_double_push_back(self, x)

    def front(self):
        return _fastestrplidar.vector_double_front(self)

    def back(self):
        return _fastestrplidar.vector_double_back(self)

    def assign(self, n, x):
        return _fastestrplidar.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _fastestrplidar.vector_double_resize(self, *args)

    def insert(self, *args):
        return _fastestrplidar.vector_double_insert(self, *args)

    def reserve(self, n):
        return _fastestrplidar.vector_double_reserve(self, n)

    def capacity(self):
        return _fastestrplidar.vector_double_capacity(self)
    __swig_destroy__ = _fastestrplidar.delete_vector_double

# Register vector_double in _fastestrplidar:
_fastestrplidar.vector_double_swigregister(vector_double)

class vector_lidar_sample(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastestrplidar.vector_lidar_sample_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastestrplidar.vector_lidar_sample___nonzero__(self)

    def __bool__(self):
        return _fastestrplidar.vector_lidar_sample___bool__(self)

    def __len__(self):
        return _fastestrplidar.vector_lidar_sample___len__(self)

    def __getslice__(self, i, j):
        return _fastestrplidar.vector_lidar_sample___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastestrplidar.vector_lidar_sample___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastestrplidar.vector_lidar_sample___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastestrplidar.vector_lidar_sample___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastestrplidar.vector_lidar_sample___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastestrplidar.vector_lidar_sample___setitem__(self, *args)

    def pop(self):
        return _fastestrplidar.vector_lidar_sample_pop(self)

    def append(self, x):
        return _fastestrplidar.vector_lidar_sample_append(self, x)

    def empty(self):
        return _fastestrplidar.vector_lidar_sample_empty(self)

    def size(self):
        return _fastestrplidar.vector_lidar_sample_size(self)

    def swap(self, v):
        return _fastestrplidar.vector_lidar_sample_swap(self, v)

    def begin(self):
        return _fastestrplidar.vector_lidar_sample_begin(self)

    def end(self):
        return _fastestrplidar.vector_lidar_sample_end(self)

    def rbegin(self):
        return _fastestrplidar.vector_lidar_sample_rbegin(self)

    def rend(self):
        return _fastestrplidar.vector_lidar_sample_rend(self)

    def clear(self):
        return _fastestrplidar.vector_lidar_sample_clear(self)

    def get_allocator(self):
        return _fastestrplidar.vector_lidar_sample_get_allocator(self)

    def pop_back(self):
        return _fastestrplidar.vector_lidar_sample_pop_back(self)

    def erase(self, *args):
        return _fastestrplidar.vector_lidar_sample_erase(self, *args)

    def __init__(self, *args):
        _fastestrplidar.vector_lidar_sample_swiginit(self, _fastestrplidar.new_vector_lidar_sample(*args))

    def push_back(self, x):
        return _fastestrplidar.vector_lidar_sample_push_back(self, x)

    def front(self):
        return _fastestrplidar.vector_lidar_sample_front(self)

    def back(self):
        return _fastestrplidar.vector_lidar_sample_back(self)

    def assign(self, n, x):
        return _fastestrplidar.vector_lidar_sample_assign(self, n, x)

    def resize(self, *args):
        return _fastestrplidar.vector_lidar_sample_resize(self, *args)

    def insert(self, *args):
        return _fastestrplidar.vector_lidar_sample_insert(self, *args)

    def reserve(self, n):
        return _fastestrplidar.vector_lidar_sample_reserve(self, n)

    def capacity(self):
        return _fastestrplidar.vector_lidar_sample_capacity(self)
    __swig_destroy__ = _fastestrplidar.delete_vector_lidar_sample

# Register vector_lidar_sample in _fastestrplidar:
_fastestrplidar.vector_lidar_sample_swigregister(vector_lidar_sample)

class vector_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastestrplidar.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastestrplidar.vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _fastestrplidar.vector_vector_double___bool__(self)

    def __len__(self):
        return _fastestrplidar.vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _fastestrplidar.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastestrplidar.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastestrplidar.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastestrplidar.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastestrplidar.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastestrplidar.vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _fastestrplidar.vector_vector_double_pop(self)

    def append(self, x):
        return _fastestrplidar.vector_vector_double_append(self, x)

    def empty(self):
        return _fastestrplidar.vector_vector_double_empty(self)

    def size(self):
        return _fastestrplidar.vector_vector_double_size(self)

    def swap(self, v):
        return _fastestrplidar.vector_vector_double_swap(self, v)

    def begin(self):
        return _fastestrplidar.vector_vector_double_begin(self)

    def end(self):
        return _fastestrplidar.vector_vector_double_end(self)

    def rbegin(self):
        return _fastestrplidar.vector_vector_double_rbegin(self)

    def rend(self):
        return _fastestrplidar.vector_vector_double_rend(self)

    def clear(self):
        return _fastestrplidar.vector_vector_double_clear(self)

    def get_allocator(self):
        return _fastestrplidar.vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _fastestrplidar.vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _fastestrplidar.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        _fastestrplidar.vector_vector_double_swiginit(self, _fastestrplidar.new_vector_vector_double(*args))

    def push_back(self, x):
        return _fastestrplidar.vector_vector_double_push_back(self, x)

    def front(self):
        return _fastestrplidar.vector_vector_double_front(self)

    def back(self):
        return _fastestrplidar.vector_vector_double_back(self)

    def assign(self, n, x):
        return _fastestrplidar.vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _fastestrplidar.vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _fastestrplidar.vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _fastestrplidar.vector_vector_double_reserve(self, n)

    def capacity(self):
        return _fastestrplidar.vector_vector_double_capacity(self)
    __swig_destroy__ = _fastestrplidar.delete_vector_vector_double

# Register vector_vector_double in _fastestrplidar:
_fastestrplidar.vector_vector_double_swigregister(vector_vector_double)



